name: Code Quality Check

on: 
  push:
    branches: [ main, feature ]
  pull_request:
    branches: [ main ]

jobs:
  pylint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint bandit safety black isort
        # Install project dependencies if requirements.txt exists
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Check code formatting with Black
      run: |
        black --check --diff .
      continue-on-error: true
      
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
      continue-on-error: true
      
    - name: Run Pylint analysis
      run: |
        echo "Running Pylint on Python files..."
        pylint $(git ls-files '*.py') --output-format=text --reports=yes --score=yes > pylint-report.txt || true
        cat pylint-report.txt
        
    - name: Check Pylint score
      run: |
        SCORE=$(tail -2 pylint-report.txt | grep -o '[0-9]\+\.[0-9]\+' | head -1)
        echo "Pylint Score: $SCORE/10"
        if (( $(echo "$SCORE < 8.0" | bc -l) )); then
          echo "‚ùå Pylint score $SCORE is below minimum threshold of 8.0"
          exit 1
        else
          echo "‚úÖ Pylint score $SCORE meets quality standards"
        fi
        
    - name: Security check with Bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true
      continue-on-error: true
      
    - name: Check for known security vulnerabilities
      run: |
        safety check || true
      continue-on-error: true
      
    - name: Upload Pylint report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pylint-report-${{ matrix.python-version }}
        path: pylint-report.txt
        
    - name: Upload Bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report-${{ matrix.python-version }}
        path: bandit-report.json
        
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            const pylintReport = fs.readFileSync('pylint-report.txt', 'utf8');
            const lines = pylintReport.split('\n');
            const scoreLine = lines.find(line => line.includes('Your code has been rated'));
            
            const comment = `## üîç Code Quality Report
            
            **Pylint Analysis Complete** ‚úÖ
            
            ${scoreLine || 'Score not found'}
            
            üìä Full report available in workflow artifacts.
            
            **Python Version:** ${{ matrix.python-version }}
            **Commit:** ${context.sha.substring(0, 7)}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not read pylint report:', error.message);
          }
